

Implementation Plan:

-----------------------------------------------------------------------------
9/10
1. Set Up User Roles:
   a) Create a custom user model (optional, only if needed).
   b) Define admin and viewer roles using Djangoâ€™s groups or permissions.
   c) Assign permissions to each role.

-----------------------------------------------------------------------------
10/10
2. Implement Session Expiration:
   a) Set session expiration for all users in settings.py.
   b) Customize session expiration time for viewer users.

-----------------------------------------------------------------------------
3. Define User Actions:
   a) Define admin-specific actions (Implement Admin-Only File Upload Feature).

-----------------------------------------------------------------------------
14/10
4. Backend: Ensure Data Processing and Storage
   a) Ensure the uploaded Excel file is correctly processed and saved into the database.

17/10
   b) Confirm all data fields are accurately mapped from Excel to your database model. 
         Testing & Verification:
            -Verify Data Integrity
                  Test the upload functionality thoroughly with various Excel files.
                  Verify the database entries to ensure the hierarchy and office names are stored correctly.
            -UI Verification:
                  Check that success and error messages are displayed properly after uploading.

18/10
5. Back-end Features
   -In Development:
      !) LOAD DATABASE logic adds a layer of validation to prevent unintended changes.
            -Pre-upload Comparison Step
            -User Decision Interface  
         1) [Admin][Animation]            Show time to load data / Animation of loading
         2) [Admin]                       Automatically delete the XLS files used to upload data to the database.
         3) [Admin][Animation]            Msj Advice: Data loaded (Excel files)
         4) [Admin][Option Button]        Show the differences between the last database with the new. Comparing only the hierarchies, and office names.

   -For Development:
      a) [Home page]                   Register new users through email requests. 
      b) [Admin][Option Button]        Delete last upload data and restore the database to a previous state.
      c) [Both Users][Option Button]   Log Out Button
      d) [Admin][Animation]            Show time to load data / Animation of loading 
      e) [Both Users][Option Button]   Enable users to search by name, role, or department with advanced filtering options.
      f) [Both Users][Option Button]   Export and Reporting Tools: Data export in formats like JPEG, PDF.
      g) [Both Users][Options Menu]    Lateral Menu for each department with essencial data.


-----------------------------------------------------------------------------
6. Create an API Endpoint for Chart Data (!To check)
   a) Implement an API endpoint that serves the data in JSON format for D3.js to render the organizational chart.
   b) Use Django's `JsonResponse` to provide a response containing the latest database data.

-----------------------------------------------------------------------------
7. Update the D3.js Script
   a) Update the JavaScript in `admin_dashboard.html` to make an AJAX call to the API endpoint and fetch the updated chart data.
   b) Ensure the chart is updated every time the page loads or refreshes.

-----------------------------------------------------------------------------
8. Add Popup Logout Message
   a) Create a JavaScript-based Popup for Logout Confirmation:
     - Implement a modal that asks users to confirm before logging out.
   b) Display a Django Success Message upon Logout:
     - Use Django's messaging framework to display a success message after a user logs out.

-----------------------------------------------------------------------------
9. Front-End Implementations
   a) [Both Users] Compatibility with desktops, tablets, and smartphones.

-----------------------------------------------------------------------------
10. User Interface Improvements
   a) Loading Indicator Add a loading indicator to the popup modal while the Excel file is being processed.
   b) Success/Error Messages Display feedback after the file is successfully uploaded and processed, or if an error occurs.

-----------------------------------------------------------------------------
11. Test Permissions
   a) Test Session Expiration for Both User Roles
     - Ensure session timeouts work as expected for both viewers and admins.
   b) Test Role-Specific Actions (Viewers vs Admins):
     - Ensure that viewers can only view the chart while admins can upload and modify data.

-----------------------------------------------------------------------------
12. Code Cleanup and Optimization
   a) Error Handling Add proper error handling in the views to manage invalid files, missing fields, etc.
   b) Code Review Review all code for security best practices, particularly around file uploads (e.g., allowed file types).

-----------------------------------------------------------------------------
13. Final Testing
   a) Test All Features: Ensure file uploads, data processing, chart rendering, and different user access levels work as expected.
   b) Test Edge Cases Test for scenarios like large Excel files, incorrect file formats, etc.

-----------------------------------------------------------------------------
14. Deployment Preparation (if applicable)
   a) Prepare for Deployment: Prepare your project for deployment in a production environment.
   b) Deployment Settings: Configure settings such as `DEBUG=False`, secure database credentials, and set up a web server (e.g., Nginx).